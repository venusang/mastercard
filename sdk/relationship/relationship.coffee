###*
Base relationship class.  Provides attributes and simple initialization common
to all relationships.  This class should not be used directly but subclassed.

Three relationship types are provided for convience.  Please refer to the
relationship documentation pages for more information:

- {@link AP.relationship.BelongsTo BelongsTo}
- {@link AP.relationship.HasMany HasMany}
- {@link AP.relationship.HasOne HasOne}

Relationships should not be instantiated directly.  Please see
{@link AP.model.Model#relationshipDefinitions} for more information on
declaring relationships.

@module AP
@submodule relationship
@class Relationship
@extends Backbone.Events
###
class AP.relationship.Relationship
  # mixin Backbone events
  _.extend @::, Backbone.Events
  
  ###*
  The owning model instance of this relationship.
  @property owner
  @type AP.model.Model
  ###
  owner: null
  
  ###*
  The field name for this relationship.  A relationship inserts a field into the
  owner model instance with a default value of {@link #getDefault}.
  The field name is preferably a variant of {@link #foreignKey}.  For instance,
  if `foreignKey` is `user_id`, then `name` should be `user` (or `users` for
  has-many relationships).
  @property name
  @type String
  ###
  name: null
  
  ###*
  Field name where the value of the relationship may be found.  In belongs-to
  relationships, `foreignKey` is found on the owner model instance.  In has-many
  and has-one relationships, `foreignKey` is found on the target model
  instance(s).  See {@link #model}.
  @property foreignKey
  @type String
  ###
  foreignKey: null
  
  ###*
  A string representing the class name of a model or a proper model class.  The
  model class is the target for this relationship.  Related instances must be of
  this model.
  @property model
  @type String/AP.model.Model
  ###
  model: null
  
  ###*
  A string representing the class name of a collection or a proper collection
  class.  The collection class is used by this relationship to store the related
  instance(s).  On initialization of this relationship, the collection is
  instantiated and this property becomes a reference to that instance.
  @property collection
  @type String/AP.collection.Collection
  ###
  collection: null
  
  constructor: -> @initialize.apply @, arguments
  
  initialize: (owner, @options={}) ->
    @app = window.AP.getActiveApp?()
    @owner = owner or @owner
    @name = @options.name or @name
    @foreignKey = @options.foreignKey or @foreignKey
    @initializeModel()
    @initializeCollection()
    @initializeDefault()
    @initializeEvents()
  
  initializeModel: ->
    @model = @options.model or @model
    @model = @app?.getModel(@model) or @model
  
  initializeCollection: ->
    @collection = @options.collection or @collection
    @collection = new (@app?.getCollection(@collection) or @collection)
  
  initializeEvents: ->
    @listenTo @collection, 'add', @onCollectionAdd
    @listenTo @collection, 'remove', @onCollectionRemove
    @listenTo @collection, 'sync', @onCollectionSync
    @listenTo @collection, 'change', @onRelatedChange
  
  initializeDefault: -> @owner.set @name, @getDefault(), {silent: true}
  
  ###*
  Handles the addition of instances into {@link #collection}.  Subclasses should
  implement this method if necessary.
  @method onCollectionAdd
  @param {AP.model.Model} record a model instance added to the collection
  ###
  onCollectionAdd: (record) ->
    # pass
  
  ###*
  Handles the addition of instances into {@link #collection}.  Subclasses should
  implement this method if necessary.
  @method onCollectionRemove
  @param {AP.model.Model} record a model instance added to the collection
  ###
  onCollectionRemove: (record) ->
    # pass
  
  ###*
  Called whenever {@link #collection} is synced with the server.  Subclasses
  should implement this method if necessary.
  @method onCollectionSync
  ###
  onCollectionSync: ->
    # pass
  
  ###*
  Called whenever an instance in {@link #collection} is changed.  By default,
  this method triggers a change event on the owner's {@link #name} field, the
  field generated by the relationship.
  @method onRelatedChange
  ###
  onRelatedChange: -> @owner.trigger "change:#{@name}"
  
  ###*
  Returns a default value for the generated {@link #name} field on
  {@link #owner}.  The generated field is created using the default value as
  soon as the relationship is initialized.
  @method getDefault
  @return {Object} default value for generated field on owner
  ###
  getDefault: -> null
  
  ###*
  Returns a hash of parameters passed to the {@link #collection} `query` method.
  @method getQuery
  @return {Object} parameters passed to collection's query method
  ###
  getQuery: -> {}
  
  ###*
  Query the underlaying {@link #collection} and execute `callback` upon success.
  The fetch method gets the model instance(s) for this relationship from the
  server.  Depending on the relationship type, the value of the {@link #name}
  field may be a single model instance or the {@link #collection} itself.  No
  default implementation of this method is provided.  Subclasses should provide
  an implementation.
  @method fetch
  @param {Function} callback function to execute upon fetch success.
  ###
  fetch: (callback) -> null
